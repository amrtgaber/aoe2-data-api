// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  username String? @unique
  hash     String

  drafts Draft[]

  @@map("users")
}

model Draft {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  desc    String?
  private Boolean @default(true)

  owner   User  @relation(fields: [ownerId], references: [id])
  ownerId Int
  civs    Civ[]

  @@map("drafts")
}

model Civ {
  id Int @id @default(autoincrement())

  civName String @unique

  units     Unit[]
  techs     Tech[]
  buildings Building[]
  drafts    Draft[]

  @@map("civs")
}

model Unit {
  id Int @id @default(autoincrement())

  unitName String @unique

  age   Age @relation(fields: [ageId], references: [id])
  ageId Int

  civs      Civ[]
  buildings Building[]

  @@map("units")
}

model Tech {
  id Int @id @default(autoincrement())

  techName String @unique

  age   Age @relation(fields: [ageId], references: [id])
  ageId Int

  civs      Civ[]
  buildings Building[]

  @@map("techs")
}

model Building {
  id Int @id @default(autoincrement())

  buildingName String @unique

  age   Age @relation(fields: [ageId], references: [id])
  ageId Int

  civs  Civ[]
  units Unit[]
  techs Tech[]

  @@map("buildings")
}

model Age {
  id Int @id @default(autoincrement())

  ageName String @unique

  units     Unit[]
  techs     Tech[]
  buildings Building[]

  @@map("ages")
}

model Version {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  gameVersion String
  apiVersion  String

  @@map("versions")
}
